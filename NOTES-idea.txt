
OVERVIEW

  This file describes a tool, tentatively named 'state', whose function is
  to drive a system of state files through process-associated transitions,
  so as to reach a user-specified state.

  For example, the command:

	$ state a@active

  has roughly the same effect as this shell command:

	$ echo active > a/state

  except that it also runs some related commands from a (Makefile-like)
  Statefile.  When the commands associated with transitions to a@active
  succeed, the file named a/state is updated to hold the string "active".
  During this time, the file a/state is locked (flock).

DEFINITIONS

  state system - a directory containing state value, and optional rule files
  state rules  - transition definitions, ending in '.states'
  state value  - a simple string, stored in a file named 'state'
  state        - collective name for the pair <state system>@<state value>

UNIX INTEGRATION

  The tool tries to fit the unix tool philosophy:

  * state is stored in the filesystem as a simple text file;
  * the tool concentrates on just one thing: advancing states
    through transitions;
  * the rules are in a simple, editable text format;
  * state systems are directories, open for extension;
  * transition actions are shell commands;
  * parallel instances of the tool interact using the
    filesystem to communicate

RULES

  The state rule files are parsed for transition rules with syntax
  similar to that used by make:

	<goal-patterns> : <required-states> [;]
		<command>
		...

  The syntax also admits a simple variable/macro system, similar that
  provided by GNU make: (See PATTERNS AND MACROS, below.) Variables
  are defined:

	<variable-ident> {=|:=|?=} <macro-text>

  In a transition rule, the <required-states> list indicate what states
  must be reached first before the tool can attempt a transition to a
  goal. Once the required states have been reached, the transition is
  committed to and each <command> is run in sequence.

  If all of the commands succeed, then the state file is updated
  with the goal state. If a command fails, the state is not changed, and
  either the tool fails, or it attempts to find another path to the
  given goal. (An .error directive can be used to force the state file
  to be set to an fixed value on error.)

  Consider this rule:

	eth0@UP:
		ifconfig eth0 up
		ifconfig eth0 | grep up

  Running 'state eth0@UP' will perform the given commands, then write the
  token 'UP' into the file 'eth0'.

  Multiple rules with the same goal state are permitted and useful.
  The system will try each rule in order until one succeeds.
  In the following example, running 'state eth0@UP' will try the
  first two lines, and if either of them exit false, then it will
  abandon the transition using that rule, then try again with the
  second rule.

	eth0@UP:
		ifconfig eth0 up
		ifconfig eth0 | grep up
	eth0@UP:
		ifconfig eth0 delete
		ifconfig eth0 up --force


PREREQUISTITES AND WEIGHTS

  A transition rule's goal is optionally followed by a list of prerequisite goals.
  A transition can only be made when all the prerequisites are met.

  The prerequisite states are locked while the transition proceeds.
  The main feature of the tool is that it will figure out the cheapest sequence
  of transitions to reach a given state.

  Transitions are expressed in an abstract fashion:

	<goal-pattern>  : <prerequistite-macro>

  Because the concrete goal name is known, the prereq macro can make use
  of special variables such as $@.

  When the prereq-macro finishes expanding, it is then interpreted as
  a prerequisite expression enclosed in { }. The expression has the
  following forms:

	{ <P> ...  }         - any of the <P>s must be met -- default
	( <P> ...  )         - all of the <P>s must be met
	<dir>@<value>	     - <dir>/state must contain the string <value>
	! <P>		     - the <P> must not be met

  The system searches the transition graph to find the least-cost
  transition sequence to satisfy the prereq expression.

  Transitions that are defined earlier are considered to be
  slightly cheaper.

RETRIES AND TIMEOUTS

  Transition rules that are expected to fail can be annotated with
  .RETRIES for automatic retry (with a delay defaulting to 1 second).
  They can also be aborted if they take too long, by using the
  .TIMEOUT directive.

	.RETRIES eth0@UP 20 0.5
	.TIMEOUT eth0@UP 10

  Such directives can also be specified within a rule, and then they
  apply only to that rule.

	eth0@UP:
		.RETRIES 20
		.TIMEOUT 10
		ifconfig eth0 up
		ifconfig eth0 | grep up

  Outside of a rule, the first argument to such directives is a pattern
  glob. This means that defaults can be specified using '*':

	.TIMEOUT * 60

  Later directives always supercede earlier ones.

ERROR STATES

  If a rule's commands fail, the default behaviour is to abandon
  the transition, leaving the system state unchanged.
  It may be useful to automatically transition to an explicit error
  state. This is indicated with the macro

	.ERRORSTATE <error> <patternglob>

  This says that should state systems matching the <fileglob> fail
  transitioning to <rule>, they should instead be recorded as being
  in state <error>.

PATTERNS AND MACROS

  A macro is a string expanded at use time. Most text in a state rule
  file except command scripts are treated as macros and expanded just
  before use.

  Macro expansion involves first expanding braces, then substituting
  variable references, and function references.

  (If a brace expansion does not contain a comma, nor a .. sequence,
  then it is left unchanged.)

  Variable expansion is usually delayed until the macro text
  is required, and is dependent upon environment variables:

	$(VAR)                  - environment variable expansion
	$(func arg1,arg2,...)   - macro function, eg $(subst FROM,TO,TEXT)
	${VAR}                  - same as $(VAR) (but functions not permitted)

  A pattern is a string containing wildcards (globs). It is tested against
  all the strings of an extrinsic "match environment", and results in
  a match set of strings. In some cases when the match set is empty, the
  literal pattern text is used.

  Substrings of a pattern have the following meaning:

	?			- match any single character
	*                       - same as *(?)
	[xyz]                   - character class; similar to @(x|y|z)
	?(pattern|...)          - match 0 or 1
	*(pattern|...)          - match 0 or more
	+(pattern|...)          - match 1 or more
	@(pattern|...)          - match 1 of the patterns
	!(pattern|...)          - (not supported)

  For example, the pattern eth0@@(up|down) is the same as
	@(eth0@up|eth0@down)

RULE EXPANSION

  The left-hand side of a rule definition is treated first as a macro
  to expand, then as a glob pattern to match. The right-hand side
  (the dependencies) are only ever treated as macros. So too the
  script command lines.

  The match environment is the union formed of the filesystem
  (originated at the current working dirctory) and the set of all
  the dependency strings of active goals.

  A rule with multiple left-hand-side terms is exactly equivalent to
  specifying the rule multiple times for each term. That is, The rule

	a b: DEP ; CMD

  is exactly equivalent to

	a: DEP ; CMD
	b: DEP ; CMD

SPECIAL VARIABLES

	$@		expands to the current full <dir>@<state> goal
	$(@D)		expands to the <dir> part of $@
	$(@S)		expands to the <state> part of $@

SPECIAL FUNCTIONS

	$(subst FROM,TO,TEXT)
	$(seq LO,HI[,INC])
	$(foreach VAR,WORDS,MACRO)
	$(call VAR[,ARG...])

PROPERTIES

  Properties are extensions of state that can be stored in the
  state system directory. Before any command in a transition rule
  is run, its environment is updated by reading files under
  the subdirectory "prop". For example, the file eth0/prop/MAC
  is used to set the shell variable $MAC (and the macro variable
  $(MAC)).

  The macro function $(property P) expands to the
  unquoted path of the file containing the property text of $(P).

	eth0@UP:
		ifconfig eth0 up
		cp /sys/class/net/eth0/address >$(property MAC)
		echo eth0 mac address is $(MAC)

  Properties are made available to shell fragments through the enviroment.
  Properties can be deleted, and patterns are permitted

		$(RM) $(property MAC)



STATE GROUPS

  Sometimes it is useful to group states together so that dependencies
  are simpler.

  One way to do this is with careful naming of your state names using
  a prefix you can match on. For example, your states might be:
  running/up running/paused stopped/down. Then you can specify patterns
  such as eth0@running/* or eth0@stopped/*.

  Another way is to assign all the various states to a variable and then
  join them to create a pattern that matches any. This is what the
  special group variable expression $(|var) does.

  For example, say you have defined $(running) as:
	running = up paused
  then $(|running) will expand to
	@(up|paused)

BUGS

  Consider these transition rules:

	#  left <--> middle-left <--> middle-right <--> right
	*@left: *@middle-left
	*@middle-left: *@left
	*@middle-left: *@middle-right
	*@middle-right: *@middle-left
	*@middle-right: *@right
	*@right: *@middle-right

  Say the initial state is a@middle-right, and these two concurrent
  instances are started:

	state a@left
	state a@right

  The resulting system may end up oscillating forever between
  a@middle-left and @middle-right.

